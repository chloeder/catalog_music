// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=handler_mock_test.go -package=memberships
//

// Package memberships is a generated GoMock package.
package memberships

import (
	memberships "catalog-music/internal/models/memberships"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockmembershipService is a mock of membershipService interface.
type MockmembershipService struct {
	ctrl     *gomock.Controller
	recorder *MockmembershipServiceMockRecorder
	isgomock struct{}
}

// MockmembershipServiceMockRecorder is the mock recorder for MockmembershipService.
type MockmembershipServiceMockRecorder struct {
	mock *MockmembershipService
}

// NewMockmembershipService creates a new mock instance.
func NewMockmembershipService(ctrl *gomock.Controller) *MockmembershipService {
	mock := &MockmembershipService{ctrl: ctrl}
	mock.recorder = &MockmembershipServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmembershipService) EXPECT() *MockmembershipServiceMockRecorder {
	return m.recorder
}

// SignUp mocks base method.
func (m *MockmembershipService) SignUp(req *memberships.SignUpRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockmembershipServiceMockRecorder) SignUp(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockmembershipService)(nil).SignUp), req)
}
